{"componentChunkName":"component---src-templates-blog-post-js","path":"/parse-command-line-arguments-in-bash/","result":{"data":{"site":{"siteMetadata":{"title":"TS Blog"}},"markdownRemark":{"id":"4e29aff8-9157-5644-b6da-7a7aa7cf0c9b","excerpt":"最近的一个前端小项目是智能 Wi-Fi 音箱 Sugr Cube 中的 Web 上传歌曲界面，使用了 Require.js 组织代码，文件上传部分基于 jQuery File Upload。Web page 编写完后需要使用 r.js 打包处理下，并将生成的文件上传到硬件设备里的 Nweb 目录下。 项目结构 npm…","html":"<p>最近的一个前端小项目是智能 Wi-Fi 音箱 <a href=\"http://sugrsugr.com\">Sugr Cube</a> 中的 Web 上传歌曲界面，使用了 Require.js 组织代码，文件上传部分基于 <a href=\"https://github.com/blueimp/jQuery-File-Upload\">jQuery File Upload</a>。Web page 编写完后需要使用 r.js 打包处理下，并将生成的文件上传到硬件设备里的 <a href=\"https://github.com/ankushagarwal/nweb\">Nweb</a> 目录下。</p>\n<h2>项目结构</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">|--node_modules\n|  |-- blueimp-file-upload-node\n|  |  本地文件上传服务器\n|  |-- requirejs\n|  |  requirejs optimizer (r.js)\n|  |-- inliner\n|  |  Node utility to inline images, CSS and JavaScript for a web page\n|--public\n|  静态文件（css，js，images等）\n|-- package.json\n|  npm 项目配置\n|-- index.html</code></pre></div>\n<h2>npm scripts</h2>\n<p>编写 <a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a> 用来运行相关脚本：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"r.js -o baseUrl=public/js paths.requireLib=require paths.jquery=jquery name=app include=requireLib out=public/js/app-built.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"inliner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inliner -vs index.html > www/index.html\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node node_modules/blueimp-file-upload-node/server.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>OK，页面开发完后运行相应的命令 <code class=\"language-text\">npm run build</code>，<code class=\"language-text\">npm run inliner</code> 之后，再将生成好的单一 HTML 文件（www/index.html）scp 到硬件设备的文件 www 目录下。那么问题来了，调试过程中需要频繁的重复这一过程，而且硬件设备的局域网 IP 地址也常会发生变化，我需要个一键部署的 shell 脚本，比如这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./publish --user root --host 192.168.1.99</code></pre></div>\n<h2>Bash script</h2>\n<p>如何编写一个能接受命令行参数的 Bash 脚本？在 stackoverflow 上找到大家推荐的方法：使用没有 getopt[s] 的 straight bash。</p>\n<h3>空格分离的 Straight Bash</h3>\n<p>使用方法：<code class=\"language-text\">./myscript.sh -e conf -s /etc -l /usr/lib /etc/hosts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># Use -gt 1 to consume two arguments per pass in the loop (e.g. each</span>\n<span class=\"token comment\"># argument has a corresponding value to go with it).</span>\n<span class=\"token comment\"># Use -gt 0 to consume one or more arguments per pass in the loop (e.g.</span>\n<span class=\"token comment\"># some arguments don't have a corresponding value to go with it such</span>\n<span class=\"token comment\"># as in the --default example).</span>\n<span class=\"token comment\"># note: if this is set to -gt 0 the /etc/hosts part is not recognized ( may be a bug )</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$#</span> -gt <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token assign-left variable\">key</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$key</span> <span class=\"token keyword\">in</span>\n    -e<span class=\"token operator\">|</span>--extension<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">EXTENSION</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    -s<span class=\"token operator\">|</span>--searchpath<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">SEARCHPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    -l<span class=\"token operator\">|</span>--lib<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">LIBPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    --default<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">DEFAULT</span><span class=\"token operator\">=</span>YES\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># unknown option</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n<span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument or value</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> FILE EXTENSION  <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${EXTENSION}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> SEARCH <span class=\"token environment constant\">PATH</span>     <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${SEARCHPATH}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> LIBRARY <span class=\"token environment constant\">PATH</span>    <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${LIBPATH}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number files in SEARCH PATH with EXTENSION:\"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> -1 <span class=\"token string\">\"<span class=\"token variable\">${SEARCHPATH}</span>\"</span>/*.<span class=\"token string\">\"<span class=\"token variable\">${EXTENSION}</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Last line of file specified as non-opt/last argument:\"</span>\n    <span class=\"token function\">tail</span> -1 <span class=\"token variable\">$1</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<h3>等号分离的 Straight Bash</h3>\n<p>使用方法：<code class=\"language-text\">./myscript.sh -e=conf -s=/etc -l=/usr/lib /etc/hosts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">in</span>\n    -e<span class=\"token operator\">=</span>*<span class=\"token operator\">|</span>--extension<span class=\"token operator\">=</span>*<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">EXTENSION</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${i<span class=\"token operator\">#</span>*=}</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument=value</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    -s<span class=\"token operator\">=</span>*<span class=\"token operator\">|</span>--searchpath<span class=\"token operator\">=</span>*<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">SEARCHPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${i<span class=\"token operator\">#</span>*=}</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument=value</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    -l<span class=\"token operator\">=</span>*<span class=\"token operator\">|</span>--lib<span class=\"token operator\">=</span>*<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">LIBPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${i<span class=\"token operator\">#</span>*=}</span>\"</span>\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument=value</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    --default<span class=\"token punctuation\">)</span>\n    <span class=\"token assign-left variable\">DEFAULT</span><span class=\"token operator\">=</span>YES\n    <span class=\"token builtin class-name\">shift</span> <span class=\"token comment\"># past argument with no value</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># unknown option</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"FILE EXTENSION  = <span class=\"token variable\">${EXTENSION}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"SEARCH PATH     = <span class=\"token variable\">${SEARCHPATH}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"LIBRARY PATH    = <span class=\"token variable\">${LIBPATH}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number files in SEARCH PATH with EXTENSION:\"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> -1 <span class=\"token string\">\"<span class=\"token variable\">${SEARCHPATH}</span>\"</span>/*.<span class=\"token string\">\"<span class=\"token variable\">${EXTENSION}</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Last line of file specified as non-opt/last argument:\"</span>\n    <span class=\"token function\">tail</span> -1 <span class=\"token variable\">$1</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>为了更好的理解 <code class=\"language-text\">${i#*=}</code> 可在<a href=\"http://tldp.org/LDP/abs/html/string-manipulation.html\">这篇指南</a>中查找 “Substring Removal”。它的功能等同于 <code class=\"language-text\">sed &#39;s/[^=]*=//&#39; &lt;&lt;&lt; &quot;$i&quot;</code>（调用了一个不必要的子进程）或者 <code class=\"language-text\">echo &quot;$i&quot; | sed &#39;s/[^=]*=//&#39;</code>（调用了两个不必要的子进程）。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"http://www.panix.com/~elflord/unix/bash-tute.html\">A quick guide to writing scripts using the bash shell</a></li>\n<li><a href=\"http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash\">How do I parse command line arguments in bash?</a></li>\n</ul>","frontmatter":{"title":"在 Bash 中解析命令行参数","date":"April 22, 2016","description":null}}},"pageContext":{"slug":"/parse-command-line-arguments-in-bash/","previous":{"fields":{"slug":"/makefile-recipes-for-nodejs/"},"frontmatter":{"title":"【译】为 Node.js 包准备的 Makefile"}},"next":{"fields":{"slug":"/nginx-and-pretty-domains/"},"frontmatter":{"title":"通过 Nginx 给本地应用取个漂亮域名"}}}},"staticQueryHashes":["1246554614","2841359383"]}