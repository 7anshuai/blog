{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx-and-pretty-domains/","result":{"data":{"site":{"siteMetadata":{"title":"TS Blog"}},"markdownRemark":{"id":"cbd2665e-7aa4-58aa-84e4-3ba71152c040","excerpt":"简单记录下之前看到并实践的一篇文章 Serving Apps Locally with Nginx and Pretty Domains。在 Mac OS X 上通过配置 Nginx 实现本地应用可以通过漂亮的域名来访问，比如 。类似的解决方案有 pow - Mac OS X 上的零配置 Rake Server…","html":"<p>简单记录下之前看到并实践的一篇文章 <a href=\"http://zaiste.net/2013/03/serving_apps_locally_with_nginx_and_pretty_domains/\">Serving Apps Locally with Nginx and Pretty Domains</a>。在 Mac OS X 上通过配置 Nginx 实现本地应用可以通过漂亮的域名来访问，比如 <code class=\"language-text\">http://anapp.dev/</code>。类似的解决方案有 <a href=\"http://pow.cx\">pow</a> - Mac OS X 上的零配置 Rake Server。</p>\n<h2>Nginx</h2>\n<p>首先需要关掉 Apache 进程（Mac OS X 上默认启动 Apache 监听 <code class=\"language-text\">80</code> 端口）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist</code></pre></div>\n<p>使用 Homebrew 安装 Nginx ：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> nginx</code></pre></div>\n<p>Nginx 监听 <code class=\"language-text\">80</code>（或任何小于 <code class=\"language-text\">1024</code> 的）端口需要使用 <code class=\"language-text\">sudo</code> 命令，否则会启动失败。对于大于 <code class=\"language-text\">1024</code> 的端口，如下直接为启动脚本建立一个符号链接：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents\nlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</code></pre></div>\n<p>对于 HTTP 默认端口，需要在 <code class=\"language-text\">/usr/local/etc/nginx.conf</code> 中将 <code class=\"language-text\">listen</code> 的值从 <code class=\"language-text\">8080</code> 修改为 <code class=\"language-text\">80</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n     …\n     listen 80;\n     server_name localhost;\n     …\n}</code></pre></div>\n<p>小于 <code class=\"language-text\">1024</code> 的端口不能为启动脚本建立符号链接，必须将脚本拷贝到 <code class=\"language-text\">/Library/LaunchAgents</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /usr/local/opt/nginx/homebrew.mxcl.nginx.plist /Library/LaunchAgents</code></pre></div>\n<p>在 <code class=\"language-text\">homebrew.mxcl.nginx.plist</code> 中，需要将 <code class=\"language-text\">UserName</code> 项修改为 <code class=\"language-text\">root</code>。为了方便，还可以将 <code class=\"language-text\">Label</code> 项修改为 <code class=\"language-text\">nginx</code>，这样就可以使用</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">launchctl start nginx</code></pre></div>\n<p>代替</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">launchctl start homebrew.mxcl.nginx</code></pre></div>\n<h2>本地 DNS</h2>\n<p>接下来是设置一个本地的 DNS。因为不能在 <code class=\"language-text\">/etc/hosts</code> 文件中使用通配符，无法实现类似功能：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1      *.dev.</code></pre></div>\n<p>为了解决这个问题，需要安装一个叫做 <a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\">DNSMasq</a> 的 DNS 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> dnsmasq</code></pre></div>\n<p>配置文件存储在 <code class=\"language-text\">/usr/local/etc/</code> 下的 <code class=\"language-text\">dnsmasq.conf</code> ：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> /usr/local/etc/dnsmasq.conf</code></pre></div>\n<p>在文件中写入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">address=/.dev/127.0.0.1</code></pre></div>\n<p>这样所有 <code class=\"language-text\">*.dev</code> 的站点会被重定向到本地 IP，即 <code class=\"language-text\">127.0.0.1</code>。\n类似 Nginx 进程，<code class=\"language-text\">dnsmasq</code> 需要 <code class=\"language-text\">root</code> 权限：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons\n<span class=\"token function\">sudo</span> launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</code></pre></div>\n<p>然后，需要配置 OSX 使用本地系统作为首要 DNS 服务器。进入系统设置 -> 网络，在 DNS 配置中将回环 IP (即 <code class=\"language-text\">127.0.0.1</code>)作为第一行，然后是惯例的 DNS IP：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1\n8.8.8.8\n8.8.4.4</code></pre></div>\n<p>现在，试着 <code class=\"language-text\">ping</code> 任何以 <code class=\"language-text\">.dev</code> 结尾的地址，应该返回的 IP 地址是 <code class=\"language-text\">127.0.0.1</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ping</span> example.dev\nPING example.dev <span class=\"token punctuation\">(</span><span class=\"token number\">127.0</span>.0.1<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes</code></pre></div>\n<h2>虚拟主机</h2>\n<p>关于虚拟主机配置，按照惯例在 <code class=\"language-text\">/usr/local/etc/nginx/</code> 下创建两个目录 <code class=\"language-text\">sites-enabled</code> 和 <code class=\"language-text\">sites-available</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/local/etc/nginx\n<span class=\"token function\">mkdir</span> sites-available\n<span class=\"token function\">mkdir</span> sites-enabled</code></pre></div>\n<p>在 <code class=\"language-text\">nginx.conf</code> 中的 <code class=\"language-text\">http</code> 部分，需要加入以下行：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">include sites-enabled/*.dev;</code></pre></div>\n<h3>后端参与的项目配置</h3>\n<p>现在可以指定每一个 app 的配置了。看一下配置模板文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">upstream NAME {\n    server 127.0.0.1:3000;\n}\n\nserver {\n    listen 80;\n    server_name NAME.dev;\n    root PATH_TO_PUBLIC;\n\n    try_files $uri/index.html $uri.html $uri @app;\n\n    location @app {\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $http_host;\n      proxy_redirect off;\n\n      proxy_pass http://NAME;\n    }\n}</code></pre></div>\n<p>为了使它工作起来，至少需要修改两个地方，即 <code class=\"language-text\">NAME</code> 和 <code class=\"language-text\">PATH_TO_PUBLIC</code>。 <code class=\"language-text\">NAME</code> 可以是应用程序名称。 <code class=\"language-text\">PATH_TO_PUBLIC</code> 则指定项目静态资源目录，例如在 Express 中的路径为 <code class=\"language-text\">public</code>。\n配置文件需要放在 <code class=\"language-text\">sites-available</code> 下，然后需要链接到 <code class=\"language-text\">sites-enabled</code>，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -s /usr/local/etc/nginx/sites-available/anapp.dev <span class=\"token punctuation\">\\</span>\n  /usr/local/etc/nginx/sites-enabled/anapp.dev</code></pre></div>\n<p>建立链接后，需要重启 Nginx：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> launchctl stop nginx\n<span class=\"token function\">sudo</span> launchctl start nginx</code></pre></div>\n<h3>无后端参与的项目配置</h3>\n<p>以上的配置文件对于纯静态的项目来说是不必要的。可以通过位于 <code class=\"language-text\">/usr/local/etc/nginx/nginx.conf</code> 中默认的 <code class=\"language-text\">server</code> 指令设置一个动态的应用程序分发。Nginx 会在定义的基础路径中查找匹配被请求的域名目录。如在以下例子中， <code class=\"language-text\">appname.dev</code> 会匹配 <code class=\"language-text\">/Users/zaiste/dev</code> 下一个叫做 <code class=\"language-text\">appname</code> 的目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    listen       80;\n    server_name  app localhost .dev;\n\n    set $basepath &quot;/Users/zaiste/dev&quot;;\n\n    set $domain $host;\n    if ($domain ~ &quot;^(.*)\\.dev$&quot;) {\n        set $domain $1;\n    }\n    set $rootpath &quot;${domain}&quot;;\n    if (-d $basepath/$domain/public) {\n        set $rootpath &quot;${domain}/public&quot;;\n    }\n    if (-f $basepath/$domain/index.html) {\n        set $rootpath $domain;\n    }\n\n    root $basepath/$rootpath;\n\n    # redirect server error pages to the static page /50x.html\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}</code></pre></div>\n<p>现在，只需要在 <code class=\"language-text\">/Users/zaiste/dev</code> 创建一个新的目录及相应的 HTML 文件，剩下的事情就交给 Nginx 了。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://github.com/basecamp/pow\">Pow</a> - Zero-configuration Rack server for Mac OS X</li>\n<li><a href=\"https://zaiste.net/posts/serving_apps_locally_with_nginx_and_pretty_domains/\">Serving Apps Locally with Nginx and Pretty Domains\n</a></li>\n<li><a href=\"https://passingcuriosity.com/2013/dnsmasq-dev-osx/\">Using Dnsmasq for local development on OS X</a></li>\n</ul>","frontmatter":{"title":"通过 Nginx 给本地应用取个漂亮域名","date":"September 19, 2016","description":null}}},"pageContext":{"slug":"/nginx-and-pretty-domains/","previous":{"fields":{"slug":"/parse-command-line-arguments-in-bash/"},"frontmatter":{"title":"在 Bash 中解析命令行参数"}},"next":{"fields":{"slug":"/nodejs-debugging-with-chrome-devtools/"},"frontmatter":{"title":"在 Chrome DevTools 中并行调试 Node.js 和浏览器 JavaScript"}}}},"staticQueryHashes":["1246554614","2841359383"]}