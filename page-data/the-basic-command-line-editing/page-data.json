{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-basic-command-line-editing/","result":{"data":{"site":{"siteMetadata":{"title":"TS Blog"}},"markdownRemark":{"id":"74dddab8-860a-5a08-895d-b88ac1bee08c","excerpt":"GNU Bash shell 提供了 Command line editing 功能，它是由 Readline library 实现的。Python 交互式命令行和 Node.js REPL等程序都实现了类似的命令行编辑功能。Command line editing 支持 Emacs-style 和 Vi-style…","html":"<hr>\n<p>GNU Bash shell 提供了 <a href=\"https://www.gnu.org/software/bash/manual/html_node/Command-Line-Editing.html\">Command line editing</a> 功能，它是由 <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\">Readline library</a> 实现的。Python 交互式命令行和 Node.js REPL等程序都实现了类似的命令行编辑功能。Command line editing 支持 Emacs-style 和 Vi-style 的命令风格，默认的是 Emacs-style。</p>\n<h2>命令行编辑</h2>\n<p>基本上，Unix/Linux 系统默认就支持 Command line editing，所以打开终端，或者在终端运行 Python interactive 或者 Node REPL，都可以马上使用常规的 Emacs 的控制字符集 <code class=\"language-text\">Control-*</code> 了。</p>\n<ul>\n<li><code class=\"language-text\">C-a</code> （Control-a）移动光标到行首</li>\n<li><code class=\"language-text\">C-e</code> 移动光标到行尾</li>\n<li><code class=\"language-text\">C-b</code> 将光标往左移动一个位置</li>\n<li><code class=\"language-text\">C-f</code> 将光标往右移动一个位置</li>\n<li><code class=\"language-text\">Backspace</code> 你懂得</li>\n<li><code class=\"language-text\">C-d</code> 删除光标右边的一个字符</li>\n<li><code class=\"language-text\">C-k</code> 删除光标右边所有的字符</li>\n<li><code class=\"language-text\">C-y</code> 拉回最后一次删除的字符</li>\n<li><code class=\"language-text\">C-_</code> 撤销最后一次操作</li>\n</ul>\n<h2>历史替换</h2>\n<p>历史替换（History Subsititution）的工作原理如下。所有已运行的非空命令行，都会保存到历史缓冲区，当你在一个新的提示符后输入时，实际上是在缓冲区底部添加新的一行。\n<code class=\"language-text\">C-p</code> 可以往上移动一行，<code class=\"language-text\">C-n</code> 往下移动一行，<code class=\"language-text\">C-R</code> 可以反向搜索， <code class=\"language-text\">C-s</code> 向前搜索。</p>\n<h2>键值绑定</h2>\n<p>可以在 <code class=\"language-text\">~/.inputrc</code> 文件中增加一些自定义的命令和功能。常见的形式是： <code class=\"language-text\">key-name: function-name</code> 或 <code class=\"language-text\">&quot;string&quot;: function-name</code>，还可以通过 <code class=\"language-text\">set option-name vale</code> 设置选项。\n一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># I prefer vi-style editing:</span>\n<span class=\"token builtin class-name\">set</span> editing-mode <span class=\"token function\">vi</span>\n\n<span class=\"token comment\"># Edit using a single line:</span>\n<span class=\"token builtin class-name\">set</span> horizontal-scroll-mode On\n\n<span class=\"token comment\"># Rebind some keys:</span>\nMeta-h: backward-kill-word\n<span class=\"token string\">\"\\C-u\"</span><span class=\"token builtin class-name\">:</span> universal-argument\n<span class=\"token string\">\"\\C-x\\C-r\"</span><span class=\"token builtin class-name\">:</span> re-read-init-file</code></pre></div>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://docs.python.org/2.7/tutorial/interactive.html\">Interactive Input Editing and History Substitution</a></li>\n</ul>","frontmatter":{"title":"基本的命令行编辑技巧","date":"January 26, 2015","description":null}}},"pageContext":{"slug":"/the-basic-command-line-editing/","previous":{"fields":{"slug":"/a-javascript-console-error/"},"frontmatter":{"title":"一个 JavaScript 控制台错误"}},"next":{"fields":{"slug":"/assets-pipeline-on-nodejs/"},"frontmatter":{"title":"在 Node.js 中使用 Asset Pipeline"}}}},"staticQueryHashes":["1246554614","2841359383"]}